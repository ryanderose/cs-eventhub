name: CI
on:
  push:
    branches: [main]
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        with:
          node-version: 18.19.0
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm -w lint
      - run: pnpm -w build
      - run: pnpm -w test
      - run: pnpm -w check:bundles
      - run: pnpm -w check:a11y || true
      - run: pnpm -w security:sbom
      - run: pnpm -w security:provenance

  vercel-preview:
    if: github.event_name == 'pull_request'
    name: Vercel preview deployments
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    outputs:
      demo_url: ${{ steps.deploy_demo.outputs.url }}
      api_url: ${{ steps.deploy_api.outputs.url }}
    steps:
      - name: Report missing Vercel credentials
        if: ${{ env.VERCEL_TOKEN == '' || env.VERCEL_ORG_ID == '' }}
        run: |
          echo "Vercel preview deployments skipped because VERCEL_TOKEN and/or VERCEL_ORG_ID are not configured." >> "$GITHUB_STEP_SUMMARY"
      - name: Report missing demo host project ID
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID_DEMO_HOST == '' }}
        run: |
          echo "Demo host preview deployment skipped because VERCEL_PROJECT_ID_DEMO_HOST is not configured." >> "$GITHUB_STEP_SUMMARY"
      - name: Report missing API project ID
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID_API == '' }}
        run: |
          echo "API preview deployment skipped because VERCEL_PROJECT_ID_API is not configured." >> "$GITHUB_STEP_SUMMARY"
      - uses: actions/checkout@v4
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' }}
      - uses: pnpm/action-setup@v2
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' }}
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' }}
        with:
          node-version: 18.19.0
          cache: pnpm
      - run: pnpm install --frozen-lockfile
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' }}
      - name: Deploy demo host preview
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID_DEMO_HOST != '' }}
        id: deploy_demo
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEMO_HOST }}
        run: |
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Missing Vercel project ID for demo host preview." >&2
            exit 1
          fi

          cd apps/demo-host
          mkdir -p .vercel
          cat <<JSON > .vercel/project.json
          {"orgId":"${VERCEL_ORG_ID}","projectId":"${VERCEL_PROJECT_ID}"}
          JSON

          pnpm dlx vercel pull --yes --environment=preview --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID"
          pnpm dlx vercel build --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID"
          response=$(pnpm dlx vercel deploy --prebuilt --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" --target preview --yes --archive=tgz --json)
          url=$(echo "$response" | jq -r '.url')
          if [ -z "$url" ] || [ "$url" = "null" ]; then
            echo "Failed to parse demo host deployment URL." >&2
            exit 1
          fi
          echo "url=$url" >> "$GITHUB_OUTPUT"

          echo "Demo host preview: $url" >> "$GITHUB_STEP_SUMMARY"
      - name: Deploy API preview
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID_API != '' }}
        id: deploy_api
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_API }}
        run: |
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Missing Vercel project ID for API preview." >&2
            exit 1
          fi

          cd apps/api
          mkdir -p .vercel
          cat <<JSON > .vercel/project.json
          {"orgId":"${VERCEL_ORG_ID}","projectId":"${VERCEL_PROJECT_ID}"}
          JSON

          pnpm dlx vercel pull --yes --environment=preview --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID"
          pnpm dlx vercel build --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID"
          response=$(pnpm dlx vercel deploy --prebuilt --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" --target preview --yes --archive=tgz --json)
          url=$(echo "$response" | jq -r '.url')
          if [ -z "$url" ] || [ "$url" = "null" ]; then
            echo "Failed to parse API deployment URL." >&2
            exit 1
          fi
          echo "url=$url" >> "$GITHUB_OUTPUT"

          echo "API preview: $url" >> "$GITHUB_STEP_SUMMARY"

  vercel-preview-comment:
    needs: vercel-preview
    if: needs.vercel-preview.result == 'success' && (needs.vercel-preview.outputs.demo_url != '' || needs.vercel-preview.outputs.api_url != '')
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Comment with preview URLs
        uses: actions/github-script@v7
        with:
          script: |
            const demoUrl = '${{ needs.vercel-preview.outputs.demo_url }}';
            const apiUrl = '${{ needs.vercel-preview.outputs.api_url }}';
            const urls = [
              demoUrl && demoUrl !== '' ? `• Demo host: ${demoUrl}` : null,
              apiUrl && apiUrl !== '' ? `• API: ${apiUrl}` : null
            ].filter(Boolean);

            if (!urls.length) {
              core.info('No preview URLs available; skipping comment.');
              return;
            }

            const body = `<!-- vercel-preview -->\nVercel preview deployments available:\n${urls.join('\n')}`;

            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number
            });

            const existing = comments.find((comment) => comment.body?.includes('<!-- vercel-preview -->'));

            if (existing) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body
              });
            }
